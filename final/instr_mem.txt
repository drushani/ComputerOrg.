/*
			出來結果順序:
			lw  (lw hazrad)
			nop
			beq 
			add 
			sub (forward)
			add
			j
			add (forward)
			sub
			or  (forward)
			sw
			beq (beq forward)
			multu
			mfhi
			mflo
			maddu
			mfhi
			mflo
			
*/

// lw	  $s1   $t7   0
// opcode rs    rt    offset 
// 100011 10001 01111 0000000000000000
// 35     17    15    0
// 1000 1110 0010 1111 0000 0000 0000 0000
// 8    E    2    F    0    0    0    0 
00
00
2F
8E
// beq	  $t7   $s2   3
// opcode rs    rt    offset
// 000100 01111 10010 0000000000000011
// 4      15    18    3
// 0001 0001 1111 0010 0000 0000 0000 0011
// 1    1    F    2    0    0    0    3
03
00
F2
11
// add	  $s2   $s0   $s2
// opcode rs    rt    rd    shamt funct
// 000000 10010 10000 10010 00000 100000
// 0      18    16    18    0     32
// 0000 0010 0101 0000 1001 0000 0010 0000
// 0    2    5    0    9    0    2    0
20
90
50
02
// sub	  $s2   $s0   $s2
// opcode rs    rt    rd    shamt funct
// 000000 10010 10000 10010 00000 100010
// 0      18    16    18    0     34
// 0000 0010 0101 0000 1001 0000 0010 0010
// 0    2    5    0    9    0    2    2 
22
90
50
02
// add	  $s1   $s0   $s1
// opcode rs    rt    rd    shamt funct
// 000000 10001 10000 10001 00000 100000
// 0      17    16    17    0     32
// 0000 0010 0011 0000 1000 1000 0010 0000
// 0    2    3    0    8    8    2    0
20
88
30
02
// j	  2
// opcode offset 
// 000010 00000000000000000000000010
// 2      2
// 0000 1000 0000 0000 0000 0000 0000 0010
// 0    8    0    0    0    0    0    2
02
00
00
08
// or	  $s2   $s0   $s2
// opcode rs    rt    rd    shamt funct
// 000000 10010 10000 10010 00000 100101
// 0      18    16    18    0     37
// 0000 0010 0101 0000 1001 0000 0010 0101
// 0    2    5    0    9    0    2    5
25
90
50
02
// add	  $s1   $s0   $s1
// opcode rs    rt    rd    shamt funct
// 000000 10001 10000 10001 00000 100000
// 0      17    16    17    0     32
// 0000 0010 0011 0000 1000 1000 0010 0000
// 0    2    3    0    8    8    2    0
20
88
30
02
// sub	  $s2   $s0   $s2
// opcode rs    rt    rd    shamt funct
// 000000 10010 10000 10010 00000 100010
// 0      18    16    18    0     34
// 0000 0010 0101 0000 1001 0000 0010 0010
// 0    2    5    0    9    0    2    2 
22
90
50
02
// or	  $s2   $s0   $s2
// opcode rs    rt    rd    shamt funct
// 000000 10010 10000 10010 00000 100101
// 0      18    16    18    0     37
// 0000 0010 0101 0000 1001 0000 0010 0101
// 0    2    5    0    9    0    2    5
25
90
50
02
// sw 	  $zero $s2   24
// opcode rs    rt    offset 
// 101011 00000 10010 0000000000011000
// 43     0     18    24
// 1010 1100 0001 0010 0000 0000 0001 1000
// A    C    1    2    0    0    1    8
18
00
12
AC
// beq    $s0   $s0   2 
// opcode rs    rt    offset 
// 000100 10000 10000 0000000000000010
// 4      16    16    2
// 0001 0010 0001 0000 0000 0000 0000 0010
// 1    2    1    0    0    0    0    2
02
00
10
12
// add    $s2   $s0   $s2   
// opcode rs    rt    rd    shamt funct 
// 000000 10010 10000 10010 00000 100000
// 0      18    16    18    0     32
// 0000 0010 0101 0000 1001 0000 0010 0000
// 0    2    5    0    9    0    2    0
20
90
50
02
// multu  $s0   $s1 
// opcode rs    rt    rd    shamt funct
// 000000 10000 10001 00000 00000 011001
// 0      16    17    0     0     25
// 0000 0010 0001 0001 0000 0000 0001 1001
// 0    2    1    1    0    0    1    9
19
00
11
02
// mfhi   $s2
// opcode rs    rt    rd    shamt funct 
// 000000 00000 00000 10010 00000 010000
// 0      0     0     18    0     16
// 0000 0000 0000 0000 1001 0000 0001 0000
// 0    0    0    0    9    0    1    0 
10
90
00
00
// mflo   $s3
// opcode rs    rt    rd    shamt funct
// 000000 00000 00000 10011 00000 010010
// 0      0     0     19    0     18
// 0000 0000 0000 0000 1001 1000 0001 0010
// 0    0    0    0    9    8    1    2
12
98
00
00
// maddu  $s0   $s1 
// opcode rs    rt    rd    shamt funct
// 011100 10000 10001 00000 00000 000001
// 28     16    17    0     0     1
// 0111 0010 0001 0001 0000 0000 0000 0001
// 7    2    1    1    0    0    0    1
01
00
11
72
// mfhi   $s2
// opcode rs    rt    rd    shamt funct 
// 000000 00000 00000 10010 00000 010000
// 0      0     0     18    0     16
// 0000 0000 0000 0000 1001 0000 0001 0000
// 0    0    0    0    9    0    1    0 
10
90
00
00
// mflo   $s3
// opcode rs    rt    rd    shamt funct
// 000000 00000 00000 10011 00000 010010
// 0      0     0     19    0     18
// 0000 0000 0000 0000 1001 1000 0001 0010
// 0    0    0    0    9    8    1    2
12
98
00
00
// addiu  $s1   $s0   $s1 
// opcode rs    rt    rd    shamt funct 